#
# Randomizer seed shared by all randomizer across the PDQ libraries.
# Type: Integer
# Default: 0
seed = 1
#
# Time limit (in ms).
# Type: Double
# Default: Infinity
timeout = 60000.0
#
# Canonical name of the driver class for the internal database used by the reasoner
# Type: String
# (Optional)
database_driver = org.apache.derby.jdbc.EmbeddedDriver
#
# Connection URL for the internal database used by the reasoner
# Type: String
# (Optional)
connection_url = jdbc:derby:memory:{1};create=true
#
# Name of the internal database used by the reasoner
# Type: String
# (Optional)
database_name = chase_regression
#
# Username for the internal database used by the reasoner
# Type: String
# (Optional)
database_user = root
#
# Password for the internal database used by the reasoner
# Type: String
# (Optional)
database_password = root
#
# Connection URL for the database used by the BLACKBOX_DB cost estimator (required if the cost_type=BLACKBOX_DB)
# Type: String
# (Optional)
black_box_connection_url = null
#
# Name of the database used by the BLACKBOX_DB cost estimator (required if the cost_type=BLACKBOX_DB)
# Type: String
# (Optional)
black_box_database_name = null
#
# Username for the database used by the BLACKBOX_DB cost estimator (required if the cost_type=BLACKBOX_DB)
# Type: String
# (Optional)
black_box_database_user = null
#
# Password for the database used by the BLACKBOX_DB cost estimator (required if the cost_type=BLACKBOX_DB)
# Type: String
# (Optional)
black_box_database_password = null
#
# Type of query translator to use in the BLACKBOX_DBcost estimator (required if the cost_type=BLACKBOX_DB)
# Type: BlackBoxQueryTypes
# (Optional)
# Possible value:
#	- DEFAULT: Default translator from DAG plan to SQL for blackbox cost estimation
#	- SQL_WITH: Translator from DAG plan to SQL WITH query for blackbox cost estimation
black_box_query_type = DEFAULT
#
# The maximum number of iterations to perform in planning.
# This may have different semantic depending of which planning algorithm is used.
# Type: Integer
# Default: Integer.MAX_VALUE
max_iterations = 2147483647
#
# Interval (in number of iterations) between which detailed executions informations are logged.
# Type: Integer
# Default: 10
log_intervals = 500
#
# Interval (in number of iterations) between which succint executions informations are logged.
# Type: Integer
# Default: 1
short_log_intervals = 100
#
# Path of the output file where to store the logs (optional). If missing, logs are printed to STDOUT
# Type: String
# (Optional)
output_log_path = null
#
# Type of cost estimation to use. This has an influence on the requirements of other planner parameters.
# If such requirements are violated, a PlannerException will be thrown upon initialization of the Planner.
# Type: CostTypes
# (Optional)
# Possible value:
#	- SIMPLE_CONSTANT: Estimates the cost are the sum of the cost of all accesses in a plan, 
#	   where cost are provided externally
#	- SIMPLE_RANDOM: Estimates the cost are the sum of the cost of all accesses in a plan, 
#	   where cost are assigned randomly
#	- SIMPLE_GIVEN: Estimates the cost are the sum of the cost of all accesses in a plan, 
#	   where cost are measured automatically from the underlying datasources
#	- SIMPLE_COUNT: Estimates the cost are the sum of all accesses in a plan
#	- BLACKBOX: Estimates the cost through some externally defined cost function.
#	  Currently, this defaults to the white box cost functions relying on textbox cost estimation techniques
#	- BLACKBOX_DB: Estimates the cost by translating the query to SQL and asking its cost to a database
#	- INVERSE_LENGTH: Experimental: estimates the cost as the number of atoms in a plan
#	- SIMPLE_DB: Experimental: 
cost_type = BLACKBOX
#
# Type of cardinality estimation to use.
# Type: CardinalityEstimationTypes
# Default: NAIVE
# Possible value:
#	- NAIVE: Naive cardinality estimation, based on external defined constant join/selectivity reduction factors
cardinality_estimation_type = NAIVE
#
# Type of planning algorithm to use.
# Type: PlannerTypes
# (Optional)
# Possible value:
#	- LINEAR_GENERIC: Generic (exhaustive) linear planning algorithm
#	- LINEAR_OPTIMIZED: Optimized linear planning algorithm. 
#	- LINEAR_KCHASE: Linear planning algorithm relying on KTERMINATION_CHASE reasoning type. 
#	- DAG_GENERIC: Generic (exhaustive) DAG planning algorithm
#	- DAG_SIMPLEDP: DAG planning algorithm, simulating classic DP plan optimization
#	- DAG_CHASEFRIENDLYDP: DAG DP planning algorithm, avoiding redundant chasing
#	- DAG_OPTIMIZED: DAG DP planning algorithm, relying on parallelism
planner_type = LINEAR_OPTIMIZED
#
# Number of exploration interval to wait for between query match checks.
#  Use in linear planning algorithms only.
# Type: Integer
# (Optional)
query_match_interval = 1
#
#
# Type of reasoning to use.
# Type: ReasoningTypes
# (Optional)
# Possible value:
#	- RESTRICTED_CHASE: Restricted chase as defined in the literature
#	- KTERMINATION_CHASE: Restricted chase, where the number of rule firing rounds is bounded by a constant K
#	- BOUNDED_CHASE: Restricted chase, where the number of rule firing rounds is bounded by a constant, which is automatically detected from the rules.
reasoning_type = RESTRICTED_CHASE
#
# Type of the homomorphism detected infrastructure
# Type: HomomorphismDetectorTypes
# (Optional)
# Possible value:
#	- DATABASE: Homomorphism checker relying on an internal relational database
homomorphism_detector_type = DATABASE
#
# Type of post-pruning. This is only used in optimizer linear planning
# Type: PostPruningTypes
# Default: null
# Possible value:
#	- REMOVE_ACCESSES
#post_pruning_types = REMOVE_ACCESSES
#
# Number of intervals between which to run the chase
# Type: Integer
# (Optional)
chase_interval = null
#
# Maximum depth of the exploration.
# This may have different semantic depending of which planning algorithm is used.
# Type: Integer
# (Optional)
max_depth = 2147483647
#
# Maximum level of bushiness allowed.
#  This is only used with ILP-types of planning algorithms
# Type: Integer
# Default: Integer.MAX_VALUE
max_bushiness = 2147483647
#
# Range configurations to consider as inputs to each subsequent phase of a DAG planning algorithm.
# Use in conjunction to DISTANCE2CORETOPK priority assessor
# Type: Integer
# Default: Integer.MAX_VALUE
range = 2147483647
#
# If true, a LimitReachedException is thrown during planning if a limit (e.g. time or max no. interactions) is reached.
# Otherwise, the event is logged and the planning completes gracefully
# Type: Boolean
# (Optional)
exception_on_limit = false
#
# Type of validator to use. Only required in conjunction with DAG planning algorithms
# Type: ValidatorTypes
# Default: DEFAULT
# Possible value:
#	-The DEFAULT_VALIDATOR requires the left and right configurations to be non-trivial:
#	an ordered pair of configurations (left, right) is non-trivial if the output facts of the right configuration are not included in the output facts of left configuration and vice versa.
#	-The APPLYRULE_DEPTH_VALIDATOR requires the input pair of configurations to be non trivial, their combined depth to be <= the depth threshold
#	and at least one of the input configurations to be an ApplyRule.
#	-The APPLYRULE_VALIDATOR requires the input pair of configurations to be non trivial and at least one of the input configurations to be an ApplyRule.
#	-The DEPTH_VALIDATOR requires the input pair of configurations to be non trivial and their combined depth to be <= the depth threshold.
#	-The LINEAR_VALIDATOR requires the input pair of configurations to be non trivial and their composition to be a closed left-deep configuration
#	-The RIGHT_DEPTH_VALIDATOR requires the input pair of configurations to be non trivial and the right's depth to be <= the depth threshold
validator_type = DEFAULT

#
# Type of filter to use. Only required in conjunction with DAG planning algorithms
# Type: FilterTypes
# (Optional)
# Possible values
# -The FACT_DOMINATED_FILTER class filters out the fact dominated configurations.
# A configuration c and c' is fact dominated by another configuration c' 
# if there exists an homomorphism from the facts of c to the facts of c' and the input constants are preserved. 
# -The NUMERICALLY_DOMINATED_FILTER class filters out the numerically fact dominated configurations.
# A configuration c and c' is numerically fact dominated by another configuration c' if it has <= facts than c'. 
filter_type = null
#
# Type of dominance checks to use. Only required in conjunction with DAG planning algorithms
# Type: DominanceTypes
# Default: STRICT_OPEN
# Possible value:
#	- CLOSED: Closed dominance. Given two closed configurations, one dominate the other if its facts are contained in the facts of the other, up to homomorphism
#	- OPEN: Open dominance. Given two possible open configurations, one dominate the other if 
dominance_type = OPEN
#
# Type of sucess dominance checks to use. Only required in conjunction with DAG planning algorithms
# Type: SuccessDominanceTypes
# Default: OPEN
# Possible value:
#	- CLOSED: Closed dominance on successful configurations.
#	- OPEN: Open dominance on successful configurations.
success_dominance_type = OPEN
#
# Type of sucess dominance checks to use.
#  Only applies to DAG planning algorithms
# Type: ControlFlows
# Default: TOP_DOWN
# Possible value:
#	- BOTTOM_UP: Pull control flow allowing tuples to move bottom-up only
#	- TOP_DOWN: Pull control flow allowing tuples to move top-down and bottom-up
control_flow = TOP_DOWN
#
# Specifies how follow-up joins should be handled.
# Only applies to DAG planning algorithms
# Type: FollowUpHandling
# Default: MAXIMAL
# Possible value:
#	- MINIMAL: Minimal follow-up join.
#	  Upon initializing of a DAG plan search every follow-up join gives rise to an independant ApplyRule
#	- MAXIMAL: Maximal follow-up join.
#	  Upon initializing of a DAG plan search all follow-up joins gives rise to a single/common ApplyRule
follow_up_handling = MINIMAL
#
# Type of iterative executor to use. Only applies to DAG planning algorithms.
# Type: IterativeExecutorTypes
# Default: MULTITHREADED
# Possible value:
#	- MULTITHREADED: Multi-threaded executor for runningDAG planning rounds in parallel
iterative_executor_type = MULTITHREADED
#
# Number of threads to use in the first phase of a parallel DAG planning algorithm
# Type: Integer
# Default: 50
first_phase_threads = 50
#
# Number of threads to use in the second phase of a parallel DAG planning algorithm
# Type: Integer
# Default: 50
second_phase_threads = 50
#
# Threshold for the DEPTH_THROTTLING validator
# Type: Integer
# Default: 2
depth_threshold = 2
#
# Number of rounds of rule firings to perform, in a single application of the chase. 
# Only applies to KTERMINATION_CHASE reasoning type.
# Type: Integer
# Default: Integer.MAX_VALUE
termination_k = 2147483647
#
# In true, the initial configuration is full initialized at the beginning of a planning algorithm.
# Only applies to DAG planning algorithms
# Type: Boolean
# Default: false
full_initialization = false
#
# If true, all join orders are considered during plan search
# Type: Boolean
# Default: true
order_aware = true
