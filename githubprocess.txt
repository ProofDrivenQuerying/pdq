Conventions:

The most reviewed copy of the code will be set to the master in github

A stable branch that has not yet been reviewed will be called stage, a
child of master.

We have not yet decided how to deal with different release versions of
the code.

I. Initial commands to begin work with a repository.

Grab a complete copy of a repository (general command),

git clone https://github.com/michael.benedikt/pdq.git


For every branch x in the remote pdq repository, a corresponding local branch

origin/x is created in your local repository

Alternatively you can grab a specific branch e.g., the master using

git fetch origin master


II. Making a tiny fix that doesn't require a review (e.g. renaming)


1. raise an issue associated with the master  e.g. via the web interface

2 Update local copy of master

Switch locally to the master 

git checkout master  (flags that you are working locally with master)

git pull (gets the code)


3. After editing locally,  commit changes locally 

git commit -m "<Commit message>"

the commit message should not be empty

4. After waiting at least one day for a response to the issue,

push changes from the local branch (called origin by default) back to master

git push origin master



III. A typical bug fix on some branch (master or staging or other) that  needs a review

0. raise an issue, github creates an id for it

1. create a new branch for the bug fix

git checkout <nameofbranchfixisfrom> (e.g. staging, master...)

git checkout -b "mybugfix-<id>" (new name)


2. Make bug fix locally,  commit changes locally 

git commit -m "<Commit message>"

3. Push changes from the local branch to a new branch called
bugfix-id

git push origin <bugfix-id> where id is the issue raised

4. Create a pull request (This is easy from the web interface after you push
your new branch, but it seems tricky to do form the command
line; we know that it involves git request-pull with some arguments,
but
we are not sure which arguments)


Reviewers do the following:

4a) Fetch a pull request,

Let bugfix-<id> be the branch where the pull request was issued.

#Get the id of the pull request issued in review branch

--git fetch origin pull/ID/head:<bugfix-<id>>

#Switch to the new branch that's based on this pull request:

--git checkout bugfix-<id>


4b)  Add reviewer comments and issues via web interface (how?),

via command line (how?)

The review process is described in the pdq process document.

4c) Bug owner changes code in response to reviewer comments --
we are not sure yet what this requies.

5) When review is complete, replace the branch-being-fixed with the
fixed version.

From the web interface just do a merge of this pull request

From the command line we are not sure.


IV Working on an experimental version (which may have many changes from the master, and
need to be reviewed outside of a delta with the master)
We recommend that this be created as a subproject.

1) Checkout as in III, using two git checkout command, from the appropriate branch (e.g.) stage

2) When editing, create a new subproject at the appropriate level (e.g. if it is
mostly about planning, it would be a sibling of planner with a name
myexperimentalplanner_

3) to add the new subdirectory use 

git add

and then a commit.

4) do a push to the server as part of the appropriate branch

git push origin stage


Periodically we should have this subproject reviewed using a pull
request, so that if we want to replace stable code with it we don't
have so much work to do.



**** 

Additional comments:

commit only maintains copies locally.
If you want to make any local changes persistent and visible to other machines
(e.g. you were working on a laptop and want to make the changes available for editing
on the department's linux server) it will be necessary to push the changes
into a new branch on the server <mysemilocalcopy>: we did not yet
discuss how to do this.
