#!/bin/bash                                            
#
# This script runs consecutive tests for a series of alternate configurations.
# It assumes, the rdfvs.jar and rdfvs.properties are located in the same folder
# as the scripts.
#
#	- ARG1 : the raw data file
#	- ARG2 : level 1
#	- ARG3 : level 2
#	- ARG4 : level 3
#

typeset -i a=0
typeset -i b=0
typeset -i c=0
typeset -i d=0

# Parsing command line parameters
for arg
    do

    # Switch between modes
    if [ $arg = "-l1" ]; then
      a=1;
    else if [ $arg = "-l2" ]; then
      a=2;
    else if [ $arg = "-l3" ]; then
      a=3;
    fi; fi; fi

    # Build level arrays
    if [ $a = 1 ] && [ $arg != "-l1" ]; then
      l1[b]=${arg}
      b+=1;
    else if [ $a = 2 ] && [ $arg != "-l2" ]; then
      l2[c]=${arg}
      c+=1;
    else if [ $a = 3 ] && [ $arg != "-l3" ]; then
      l3[d]=${arg}
      d+=1;
    fi; fi; fi
done;

echo "<html><head><title>Cost reduction</title></head><body>"
for level2 in ${l2[@]}
do
    echo "<a id=\"${level2}\"/>"  
#    echo "<h1>${level2}</h1>"  
    for level3 in ${l3[@]}
    do  combo="${level2}_${level3}"
	    plotCmd=""
	    sep=""
		cat clustered_header > tmp/${combo}.data
		combo="${level2}_${level3}"
		for level1 in ${l1[@]}
		do  grep  ${level1} $1 | grep ${level2} | grep ${level3} \
			>> tmp/${combo}.data
		done
		plotCmd="${plotCmd} \"tmp/${combo}.data\" u (dsSize(3)):19 t \"XML||RDF\" w lp ls 1"
		plotCmd="${plotCmd} ,\"\" u (dsSize(3)):28 t \"XML>RDF\" w lp ls 2"
		plotCmd="${plotCmd} ,\"\" u (dsSize(3)):46 t \"RDF>XML-U\" w lp ls 3"
		plotCmd="${plotCmd} ,\"\" u (dsSize(3)):37 t \"RDF>XML-UP\" w lp ls 4"
#		plotCmd="${plotCmd} ,\"\" u (dsSize(3)):82 t \"RDF>XML-UX\" w lp ls 5"
		plotCmd="${plotCmd} ,\"\" u (dsSize(3)):73 t \"RDF>XML-UXP\" w lp ls 6"
#		plotCmd="${plotCmd} ,\"\" u (dsSize(3)):64 t \"RDF>XML-\" w lp ls 8"
#		plotCmd="${plotCmd} ,\"\" u (dsSize(3)):55 t \"RDF>XML-P\" w lp ls 9"
#		plotCmd="${plotCmd} ,\"\" u (dsSize(3)):100 t \"RDF>XML-X\" w lp ls 10"
#		plotCmd="${plotCmd} ,\"\" u (dsSize(3)):91 t \"RDF>XML-XP\" w lp ls 11"
		sep=","
#echo "Plotting ${plotCmd}" 1>&2
gnuplot <<EOF
load 'cost_reduction_template_graph.gp'
set o 'tmp/${level3}.svg' 
set title "${level3}"
dsSize(x) = (stringcolumn(x) eq 'D001_S0_R-1.properties' || stringcolumn(x) eq 'D001_S1_R-1.properties' || stringcolumn(x) eq 'D001_S2_R-1.properties') ? 2100000 : \
(stringcolumn(x) eq 'D001_S0_R01.properties' || stringcolumn(x) eq 'D001_S1_R01.properties' || stringcolumn(x) eq 'D001_S2_R01.properties') ? 3200000 : \
(stringcolumn(x) eq 'D001_S0_R10.properties' || stringcolumn(x) eq 'D001_S1_R10.properties' || stringcolumn(x) eq 'D001_S2_R10.properties') ? 6600000 : \
(stringcolumn(x) eq 'D010_S0_R-1.properties' || stringcolumn(x) eq 'D010_S1_R-1.properties' || stringcolumn(x) eq 'D010_S2_R-1.properties') ? 21000000 : \
(stringcolumn(x) eq 'D010_S0_R01.properties' || stringcolumn(x) eq 'D010_S1_R01.properties' || stringcolumn(x) eq 'D010_S2_R01.properties') ? 32000000 : \
(stringcolumn(x) eq 'D010_S0_R10.properties' || stringcolumn(x) eq 'D010_S1_R10.properties' || stringcolumn(x) eq 'D010_S2_R10.properties') ? 66000000 : \
(stringcolumn(x) eq 'D100_S0_R-1.properties' || stringcolumn(x) eq 'D100_S2_R-1.properties' || stringcolumn(x) eq 'D100_S2_R-1.properties') ? 210000000 : 0
plot [2000000:250000000][10:300000] ${plotCmd}
EOF
cat tmp/${level3}.svg \
	    | sed s/.txt//g \
	    | sed s/.properties//g \
	    | sed s/workload_0/W/g \
	    | sed s/_Q[0-9]//g \
	    | sed s/_[0-9]//g
#rm tmp/${combo}.data
#rm tmp/${level3}.svg

    done
done

echo "<p>Last generated : " `date` "</p>"
echo "</body></html>"

#	    | sed s/xmark_001_noseg/D1/g \
#	    | sed s/xmark_010_noseg/D2/g \
#	    | sed s/xmark_100_noseg/D3/g \
#	    | sed s/xmark_010_seg_sf/D4/g \
#	    | sed s/xmark_100_seg_sf/D5/g \
#	    | sed s/xmark_001_seg_1M/D6/g \
#	    | sed s/xmark_010_seg_1M/D7/g \
#	    | sed s/xmark_100_seg_1M/D8/g \
